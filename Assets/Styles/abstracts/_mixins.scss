// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

@use "sass:map";
@import "../vendors/bootstrap-mixins";

// See: https://github.com/twbs/bootstrap/pull/31438
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

/// Applies breakpoint-specific values to a given property.
/// @param {String} $property - The property to apply the values to.
/// @param {Map} $breakpoint-values - The dictionary where the breakpoints are keys and the values are the values to be applied.
/// @param {Bool} $down - Defines whether the values should be applied above or below the given breakpoint (true = down).
@mixin breakpoint-property-value($property, $breakpoint-values, $down: false) {
    @each $breakpoint, $value in $breakpoint-values {
        @if $down {
            @include media-breakpoint-down($breakpoint) {
                #{$property}: $value;
            }
        } @else {
            @include media-breakpoint-up($breakpoint) {
                #{$property}: $value;
            }
        }
    }
}

/// Applies values to a given property (should be 'padding' or 'margin') based on a breakpoint-value dictionary
/// that is either horizontal or vertical (or both) with an additional option to apply negative values.
/// @param {String} $property - The property to apply the values to, 'padding' or 'margin'.
/// @param {Map} $breakpoint-values - The dictionary where the breakpoints are keys and the values will be applied.
/// @param {Bool} $horizontal [true] - Defines whether horizontal values should be applied or not.
/// @param {Bool} $vertical [false] - Defines whether vertical values should be applied or not.
/// @param {Bool} $negative [false] - Defines whether the values should be applied will be negated or not
///                                   based on the assumption that the dictionary holds positive values only.
/// @require $property, $breakpoint-values
@mixin breakpoint-side-property($property, $breakpoint-values, $horizontal: true, $vertical: false, $negative: false) {
    @each $breakpoint, $values in $breakpoint-values {
        $value: if($negative, -$values, $values);

        @include media-breakpoint-up($breakpoint) {
            @if $horizontal == true {
                #{$property}: {
                    left: $value;
                    right: $value;
                }
            }

            @if $vertical == true {
                #{$property}: {
                    top: $value;
                    bottom: $value;
                }
            }
        }
    }
}

/// Creates a horizontal or vertical (or both) margin based on a breakpoint-value dictionary
/// with an additional option to apply negative values.
/// @param {Map} $breakpoint-values - The dictionary where the breakpoints are keys and the values will be applied.
/// @param {Bool} $horizontal [true] - Defines whether horizontal values should be applied or not.
/// @param {Bool} $vertical [false] - Defines whether vertical values should be applied or not.
/// @param {Bool} $negative [false] - Defines whether the values should be applied will be negated or not
///                                   based on the assumption that the dictionary holds positive values only.
/// @require $breakpoint-values
@mixin breakpoint-margin($breakpoint-values, $horizontal: true, $vertical: false, $negative: false) {
    @include breakpoint-side-property(
        $property: "margin",
        $breakpoint-values: $breakpoint-values,
        $horizontal: $horizontal,
        $vertical: $vertical,
        $negative: $negative);
}

/// Creates a horizontal or vertical (or both) padding based on a breakpoint-value dictionary
/// with an additional option to apply negative values.
/// @param {Map} $breakpoint-values - The dictionary where the breakpoints are keys and the values will be applied.
/// @param {Bool} $horizontal [true] - Defines whether horizontal values should be applied or not.
/// @param {Bool} $vertical [false] - Defines whether vertical values should be applied or not.
/// @param {Bool} $negative [false] - Defines whether the values should be applied will be negated or not
///                                   based on the assumption that the dictionary holds positive values only.
/// @require $breakpoint-values
@mixin breakpoint-padding($breakpoint-values, $horizontal: true, $vertical: false, $negative: false) {
    @include breakpoint-side-property(
        $property: "padding",
        $breakpoint-values: $breakpoint-values,
        $horizontal: $horizontal,
        $vertical: $vertical,
        $negative: $negative);
}

@mixin text-size($text-size-level: 1) {
    @if $text-size-level < 5 {
        font-size: map.get($font-sizes, $text-size-level + 1);

        @include media-breakpoint-up(md) {
            font-size: map.get($font-sizes, $text-size-level);
        }
    } @else {
        font-size: map.get($font-sizes, $text-size-level);
    }
}
